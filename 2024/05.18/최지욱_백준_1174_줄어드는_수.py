"""
조건:
100만 이하의 자연수 N -> O(NlogN) 이내 해결

키워드:
줄어드는 수 -> 내림차순 -> 백트래킹, 브루트포스 배치

종합:
N번째로 작은 줄어드는 수를 찾아야 한다.
"줄어드는 수"이므로 9876543210이 최대값이다.

즉, 1 ~ 9876543210까지의 단순한 완전 탐색으로는 시간 초과가 발생한다.

해결방법 1.
반대로, 런타임 전의 전처리를 이용하여 모든 데이터를 저장하면 완전 탐색으로 풀 수 있다.
(시간이 얼마가 걸리든 순회해서 푼 후, 해당 데이터를 바로 출력하면 되기 때문)
데이터를 저장하는 것이 메모리 초과가 나지 않음은 문제의 N = 500000이 -1임에서 증명할 수 있다.
-> 500000 * 4Byte(int) -> 약 2MB

해결방법 2.
효율적인 방법을 생각하면, 자릿수의 개수를 n(1 <= n <= 10)이라고 하자.
이때, 이 자리에 배치할 수 있는 수는 결국 10개의 숫자 (9, 8, 7, 6, 5, 4, 3, 2, 1, 0)이다.
즉, C(10, n)이 된다.
여기서, 1023을 넘는 n은 반드시 -1임을 확인할 수 있다.

이후, 우선 N의 값을 이용하여 N번째 수가 몇 자리인지 찾는다.
이후, 백트래킹을 이용한다.
(가장 큰 C(10, 5)가 252밖에 되지 않으므로, 시간 초과가 나지 않는다.)
Python3의 itertools.combinations을 이용하면 조합을 효율적으로 구현해주므로, 이를 이용해도 된다.
"""
from itertools import combinations


# 첫 번째 풀이 -> 런타임 전의 전처리
# 이 문제는 유효한 N이 적어 데이터를 형성하는 시간이 더 큰 관계로 더 시간이 걸리는 듯 하다.
# 메모리 33260 kB, 시간 48 ms
def func():
    N = int(input())

    if N >= 1024:
        print(-1)
    else:
        d = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 12: 20, 13: 21, 14: 30, 15: 31, 16: 32, 17: 40, 18: 41, 19: 42, 20: 43, 21: 50, 22: 51, 23: 52, 24: 53, 25: 54, 26: 60, 27: 61, 28: 62, 29: 63, 30: 64, 31: 65, 32: 70, 33: 71, 34: 72, 35: 73, 36: 74, 37: 75, 38: 76, 39: 80, 40: 81, 41: 82, 42: 83, 43: 84, 44: 85, 45: 86, 46: 87, 47: 90, 48: 91, 49: 92, 50: 93, 51: 94, 52: 95, 53: 96, 54: 97, 55: 98, 56: 210, 57: 310, 58: 320, 59: 321, 60: 410, 61: 420, 62: 421, 63: 430, 64: 431, 65: 432, 66: 510, 67: 520, 68: 521, 69: 530, 70: 531, 71: 532, 72: 540, 73: 541, 74: 542, 75: 543, 76: 610, 77: 620, 78: 621, 79: 630, 80: 631, 81: 632, 82: 640, 83: 641, 84: 642, 85: 643, 86: 650, 87: 651, 88: 652, 89: 653, 90: 654, 91: 710, 92: 720, 93: 721, 94: 730, 95: 731, 96: 732, 97: 740, 98: 741, 99: 742, 100: 743, 101: 750, 102: 751, 103: 752, 104: 753, 105: 754, 106: 760, 107: 761, 108: 762, 109: 763, 110: 764, 111: 765, 112: 810, 113: 820, 114: 821, 115: 830, 116: 831, 117: 832, 118: 840, 119: 841, 120: 842, 121: 843, 122: 850, 123: 851, 124: 852, 125: 853, 126: 854, 127: 860, 128: 861, 129: 862, 130: 863, 131: 864, 132: 865, 133: 870, 134: 871, 135: 872, 136: 873, 137: 874, 138: 875, 139: 876, 140: 910, 141: 920, 142: 921, 143: 930, 144: 931, 145: 932, 146: 940, 147: 941, 148: 942, 149: 943, 150: 950, 151: 951, 152: 952, 153: 953, 154: 954, 155: 960, 156: 961, 157: 962, 158: 963, 159: 964, 160: 965, 161: 970, 162: 971, 163: 972, 164: 973, 165: 974, 166: 975, 167: 976, 168: 980, 169: 981, 170: 982, 171: 983, 172: 984, 173: 985, 174: 986, 175: 987, 176: 3210, 177: 4210, 178: 4310, 179: 4320, 180: 4321, 181: 5210, 182: 5310, 183: 5320, 184: 5321, 185: 5410, 186: 5420, 187: 5421, 188: 5430, 189: 5431, 190: 5432, 191: 6210, 192: 6310, 193: 6320, 194: 6321, 195: 6410, 196: 6420, 197: 6421, 198: 6430, 199: 6431, 200: 6432, 201: 6510, 202: 6520, 203: 6521, 204: 6530, 205: 6531, 206: 6532, 207: 6540, 208: 6541, 209: 6542, 210: 6543, 211: 7210, 212: 7310, 213: 7320, 214: 7321, 215: 7410, 216: 7420, 217: 7421, 218: 7430, 219: 7431, 220: 7432, 221: 7510, 222: 7520, 223: 7521, 224: 7530, 225: 7531, 226: 7532, 227: 7540, 228: 7541, 229: 7542, 230: 7543, 231: 7610, 232: 7620, 233: 7621, 234: 7630, 235: 7631, 236: 7632, 237: 7640, 238: 7641, 239: 7642, 240: 7643, 241: 7650, 242: 7651, 243: 7652, 244: 7653, 245: 7654, 246: 8210, 247: 8310, 248: 8320, 249: 8321, 250: 8410, 251: 8420, 252: 8421, 253: 8430, 254: 8431, 255: 8432, 256: 8510, 257: 8520, 258: 8521, 259: 8530, 260: 8531, 261: 8532, 262: 8540, 263: 8541, 264: 8542, 265: 8543, 266: 8610, 267: 8620, 268: 8621, 269: 8630, 270: 8631, 271: 8632, 272: 8640, 273: 8641, 274: 8642, 275: 8643, 276: 8650, 277: 8651, 278: 8652, 279: 8653, 280: 8654, 281: 8710, 282: 8720, 283: 8721, 284: 8730, 285: 8731, 286: 8732, 287: 8740, 288: 8741, 289: 8742, 290: 8743, 291: 8750, 292: 8751, 293: 8752, 294: 8753, 295: 8754, 296: 8760, 297: 8761, 298: 8762, 299: 8763, 300: 8764, 301: 8765, 302: 9210, 303: 9310, 304: 9320, 305: 9321, 306: 9410, 307: 9420, 308: 9421, 309: 9430, 310: 9431, 311: 9432, 312: 9510, 313: 9520, 314: 9521, 315: 9530, 316: 9531, 317: 9532, 318: 9540, 319: 9541, 320: 9542, 321: 9543, 322: 9610, 323: 9620, 324: 9621, 325: 9630, 326: 9631, 327: 9632, 328: 9640, 329: 9641, 330: 9642, 331: 9643, 332: 9650, 333: 9651, 334: 9652, 335: 9653, 336: 9654, 337: 9710, 338: 9720, 339: 9721, 340: 9730, 341: 9731, 342: 9732, 343: 9740, 344: 9741, 345: 9742, 346: 9743, 347: 9750, 348: 9751, 349: 9752, 350: 9753, 351: 9754, 352: 9760, 353: 9761, 354: 9762, 355: 9763, 356: 9764, 357: 9765, 358: 9810, 359: 9820, 360: 9821, 361: 9830, 362: 9831, 363: 9832, 364: 9840, 365: 9841, 366: 9842, 367: 9843, 368: 9850, 369: 9851, 370: 9852, 371: 9853, 372: 9854, 373: 9860, 374: 9861, 375: 9862, 376: 9863, 377: 9864, 378: 9865, 379: 9870, 380: 9871, 381: 9872, 382: 9873, 383: 9874, 384: 9875, 385: 9876, 386: 43210, 387: 53210, 388: 54210, 389: 54310, 390: 54320, 391: 54321, 392: 63210, 393: 64210, 394: 64310, 395: 64320, 396: 64321, 397: 65210, 398: 65310, 399: 65320, 400: 65321, 401: 65410, 402: 65420, 403: 65421, 404: 65430, 405: 65431, 406: 65432, 407: 73210, 408: 74210, 409: 74310, 410: 74320, 411: 74321, 412: 75210, 413: 75310, 414: 75320, 415: 75321, 416: 75410, 417: 75420, 418: 75421, 419: 75430, 420: 75431, 421: 75432, 422: 76210, 423: 76310, 424: 76320, 425: 76321, 426: 76410, 427: 76420, 428: 76421, 429: 76430, 430: 76431, 431: 76432, 432: 76510, 433: 76520, 434: 76521, 435: 76530, 436: 76531, 437: 76532, 438: 76540, 439: 76541, 440: 76542, 441: 76543, 442: 83210, 443: 84210, 444: 84310, 445: 84320, 446: 84321, 447: 85210, 448: 85310, 449: 85320, 450: 85321, 451: 85410, 452: 85420, 453: 85421, 454: 85430, 455: 85431, 456: 85432, 457: 86210, 458: 86310, 459: 86320, 460: 86321, 461: 86410, 462: 86420, 463: 86421, 464: 86430, 465: 86431, 466: 86432, 467: 86510, 468: 86520, 469: 86521, 470: 86530, 471: 86531, 472: 86532, 473: 86540, 474: 86541, 475: 86542, 476: 86543, 477: 87210, 478: 87310, 479: 87320, 480: 87321, 481: 87410, 482: 87420, 483: 87421, 484: 87430, 485: 87431, 486: 87432, 487: 87510, 488: 87520, 489: 87521, 490: 87530, 491: 87531, 492: 87532, 493: 87540, 494: 87541, 495: 87542, 496: 87543, 497: 87610, 498: 87620, 499: 87621, 500: 87630, 501: 87631, 502: 87632, 503: 87640, 504: 87641, 505: 87642, 506: 87643, 507: 87650, 508: 87651, 509: 87652, 510: 87653, 511: 87654, 512: 93210, 513: 94210, 514: 94310, 515: 94320, 516: 94321, 517: 95210, 518: 95310, 519: 95320, 520: 95321, 521: 95410, 522: 95420, 523: 95421, 524: 95430, 525: 95431, 526: 95432, 527: 96210, 528: 96310, 529: 96320, 530: 96321, 531: 96410, 532: 96420, 533: 96421, 534: 96430, 535: 96431, 536: 96432, 537: 96510, 538: 96520, 539: 96521, 540: 96530, 541: 96531, 542: 96532, 543: 96540, 544: 96541, 545: 96542, 546: 96543, 547: 97210, 548: 97310, 549: 97320, 550: 97321, 551: 97410, 552: 97420, 553: 97421, 554: 97430, 555: 97431, 556: 97432, 557: 97510, 558: 97520, 559: 97521, 560: 97530, 561: 97531, 562: 97532, 563: 97540, 564: 97541, 565: 97542, 566: 97543, 567: 97610, 568: 97620, 569: 97621, 570: 97630, 571: 97631, 572: 97632, 573: 97640, 574: 97641, 575: 97642, 576: 97643, 577: 97650, 578: 97651, 579: 97652, 580: 97653, 581: 97654, 582: 98210, 583: 98310, 584: 98320, 585: 98321, 586: 98410, 587: 98420, 588: 98421, 589: 98430, 590: 98431, 591: 98432, 592: 98510, 593: 98520, 594: 98521, 595: 98530, 596: 98531, 597: 98532, 598: 98540, 599: 98541, 600: 98542, 601: 98543, 602: 98610, 603: 98620, 604: 98621, 605: 98630, 606: 98631, 607: 98632, 608: 98640, 609: 98641, 610: 98642, 611: 98643, 612: 98650, 613: 98651, 614: 98652, 615: 98653, 616: 98654, 617: 98710, 618: 98720, 619: 98721, 620: 98730, 621: 98731, 622: 98732, 623: 98740, 624: 98741, 625: 98742, 626: 98743, 627: 98750, 628: 98751, 629: 98752, 630: 98753, 631: 98754, 632: 98760, 633: 98761, 634: 98762, 635: 98763, 636: 98764, 637: 98765, 638: 543210, 639: 643210, 640: 653210, 641: 654210, 642: 654310, 643: 654320, 644: 654321, 645: 743210, 646: 753210, 647: 754210, 648: 754310, 649: 754320, 650: 754321, 651: 763210, 652: 764210, 653: 764310, 654: 764320, 655: 764321, 656: 765210, 657: 765310, 658: 765320, 659: 765321, 660: 765410, 661: 765420, 662: 765421, 663: 765430, 664: 765431, 665: 765432, 666: 843210, 667: 853210, 668: 854210, 669: 854310, 670: 854320, 671: 854321, 672: 863210, 673: 864210, 674: 864310, 675: 864320, 676: 864321, 677: 865210, 678: 865310, 679: 865320, 680: 865321, 681: 865410, 682: 865420, 683: 865421, 684: 865430, 685: 865431, 686: 865432, 687: 873210, 688: 874210, 689: 874310, 690: 874320, 691: 874321, 692: 875210, 693: 875310, 694: 875320, 695: 875321, 696: 875410, 697: 875420, 698: 875421, 699: 875430, 700: 875431, 701: 875432, 702: 876210, 703: 876310, 704: 876320, 705: 876321, 706: 876410, 707: 876420, 708: 876421, 709: 876430, 710: 876431, 711: 876432, 712: 876510, 713: 876520, 714: 876521, 715: 876530, 716: 876531, 717: 876532, 718: 876540, 719: 876541, 720: 876542, 721: 876543, 722: 943210, 723: 953210, 724: 954210, 725: 954310, 726: 954320, 727: 954321, 728: 963210, 729: 964210, 730: 964310, 731: 964320, 732: 964321, 733: 965210, 734: 965310, 735: 965320, 736: 965321, 737: 965410, 738: 965420, 739: 965421, 740: 965430, 741: 965431, 742: 965432, 743: 973210, 744: 974210, 745: 974310, 746: 974320, 747: 974321, 748: 975210, 749: 975310, 750: 975320, 751: 975321, 752: 975410, 753: 975420, 754: 975421, 755: 975430, 756: 975431, 757: 975432, 758: 976210, 759: 976310, 760: 976320, 761: 976321, 762: 976410, 763: 976420, 764: 976421, 765: 976430, 766: 976431, 767: 976432, 768: 976510, 769: 976520, 770: 976521, 771: 976530, 772: 976531, 773: 976532, 774: 976540, 775: 976541, 776: 976542, 777: 976543, 778: 983210, 779: 984210, 780: 984310, 781: 984320, 782: 984321, 783: 985210, 784: 985310, 785: 985320, 786: 985321, 787: 985410, 788: 985420, 789: 985421, 790: 985430, 791: 985431, 792: 985432, 793: 986210, 794: 986310, 795: 986320, 796: 986321, 797: 986410, 798: 986420, 799: 986421, 800: 986430, 801: 986431, 802: 986432, 803: 986510, 804: 986520, 805: 986521, 806: 986530, 807: 986531, 808: 986532, 809: 986540, 810: 986541, 811: 986542, 812: 986543, 813: 987210, 814: 987310, 815: 987320, 816: 987321, 817: 987410, 818: 987420, 819: 987421, 820: 987430, 821: 987431, 822: 987432, 823: 987510, 824: 987520, 825: 987521, 826: 987530, 827: 987531, 828: 987532, 829: 987540, 830: 987541, 831: 987542, 832: 987543, 833: 987610, 834: 987620, 835: 987621, 836: 987630, 837: 987631, 838: 987632, 839: 987640, 840: 987641, 841: 987642, 842: 987643, 843: 987650, 844: 987651, 845: 987652, 846: 987653, 847: 987654, 848: 6543210, 849: 7543210, 850: 7643210, 851: 7653210, 852: 7654210, 853: 7654310, 854: 7654320, 855: 7654321, 856: 8543210, 857: 8643210, 858: 8653210, 859: 8654210, 860: 8654310, 861: 8654320, 862: 8654321, 863: 8743210, 864: 8753210, 865: 8754210, 866: 8754310, 867: 8754320, 868: 8754321, 869: 8763210, 870: 8764210, 871: 8764310, 872: 8764320, 873: 8764321, 874: 8765210, 875: 8765310, 876: 8765320, 877: 8765321, 878: 8765410, 879: 8765420, 880: 8765421, 881: 8765430, 882: 8765431, 883: 8765432, 884: 9543210, 885: 9643210, 886: 9653210, 887: 9654210, 888: 9654310, 889: 9654320, 890: 9654321, 891: 9743210, 892: 9753210, 893: 9754210, 894: 9754310, 895: 9754320, 896: 9754321, 897: 9763210, 898: 9764210, 899: 9764310, 900: 9764320, 901: 9764321, 902: 9765210, 903: 9765310, 904: 9765320, 905: 9765321, 906: 9765410, 907: 9765420, 908: 9765421, 909: 9765430, 910: 9765431, 911: 9765432, 912: 9843210, 913: 9853210, 914: 9854210, 915: 9854310, 916: 9854320, 917: 9854321, 918: 9863210, 919: 9864210, 920: 9864310, 921: 9864320, 922: 9864321, 923: 9865210, 924: 9865310, 925: 9865320, 926: 9865321, 927: 9865410, 928: 9865420, 929: 9865421, 930: 9865430, 931: 9865431, 932: 9865432, 933: 9873210, 934: 9874210, 935: 9874310, 936: 9874320, 937: 9874321, 938: 9875210, 939: 9875310, 940: 9875320, 941: 9875321, 942: 9875410, 943: 9875420, 944: 9875421, 945: 9875430, 946: 9875431, 947: 9875432, 948: 9876210, 949: 9876310, 950: 9876320, 951: 9876321, 952: 9876410, 953: 9876420, 954: 9876421, 955: 9876430, 956: 9876431, 957: 9876432, 958: 9876510, 959: 9876520, 960: 9876521, 961: 9876530, 962: 9876531, 963: 9876532, 964: 9876540, 965: 9876541, 966: 9876542, 967: 9876543, 968: 76543210, 969: 86543210, 970: 87543210, 971: 87643210, 972: 87653210, 973: 87654210, 974: 87654310, 975: 87654320, 976: 87654321, 977: 96543210, 978: 97543210, 979: 97643210, 980: 97653210, 981: 97654210, 982: 97654310, 983: 97654320, 984: 97654321, 985: 98543210, 986: 98643210, 987: 98653210, 988: 98654210, 989: 98654310, 990: 98654320, 991: 98654321, 992: 98743210, 993: 98753210, 994: 98754210, 995: 98754310, 996: 98754320, 997: 98754321, 998: 98763210, 999: 98764210, 1000: 98764310, 1001: 98764320, 1002: 98764321, 1003: 98765210, 1004: 98765310, 1005: 98765320, 1006: 98765321, 1007: 98765410, 1008: 98765420, 1009: 98765421, 1010: 98765430, 1011: 98765431, 1012: 98765432, 1013: 876543210, 1014: 976543210, 1015: 986543210, 1016: 987543210, 1017: 987643210, 1018: 987653210, 1019: 987654210, 1020: 987654310, 1021: 987654320, 1022: 987654321, 1023: 9876543210}
        print(d[N])


# 두 번째 풀이 -> 조합을 이용
# 메모리 31120 kB, 시간 36ms
def func2():
    N = int(input())

    if N >= 1024:
        print(-1)

    numbers = ('9', '8', '7', '6', '5', '4', '3', '2', '1', '0')
    for i in range(1, 11):
        comb = tuple(combinations(numbers, i))  # 조합 생성 후

        if len(comb) < N:  # N보다 크면 해당 조합 길이만큼 제거
            N -= len(comb)
        else:
            comb = tuple(map(''.join, comb))  # 아니라면 우선 조합을 문자열로 연결하고
            comb = sorted(map(int, comb))  # int로 바꾼 후 정렬하고
            print(comb[N - 1])  # N번째로 작은 수 (인덱스로는 -1)을 찾는다.
            break


# 세 번째 풀이 -> 두 번째 풀이 + 조합 부분의 전처리
# 메모리 31120 kB, 시간 44ms
def func3():
    N = int(input())

    if N >= 1024:
        print(-1)

    cnts = (10, 45, 120, 210, 252, 210, 120, 45, 10, 1)
    for idx, cnt in enumerate(cnts):
        if N > cnt:
            N -= cnt
        else:
            numbers = ('9', '8', '7', '6', '5', '4', '3', '2', '1', '0')
            comb = tuple(combinations(numbers, idx + 1))  # 조합 생성 후
            comb = tuple(map(''.join, comb))  # 아니라면 우선 조합을 문자열로 연결하고
            comb = sorted(map(int, comb))  # int로 바꾼 후 정렬하고
            print(comb[N - 1])  # N번째로 작은 수 (인덱스로는 -1)을 찾는다.
            break


func3()
